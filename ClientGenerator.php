<?php namespace TooBasic\Ethereum;

include 'Schema.php';
include 'Schema/Type.php';
include 'Schema/Object/Base.php';
include '../TooBasic/Exception.php';

class ClientGenerator
{
	public static function generate()
	{
		// Source: https://raw.githubusercontent.com/ethjs/ethjs-schema/master/src/schema.json
		$schema = json_decode(file_get_contents('schema.json'));

		function reduceNamespace(string $class){
			return str_replace('TooBasic\\Ethereum\\', '', $class);
		}

		foreach ($schema->objects as $name => $spec)
		{
			$requiredParams = $spec->__required;
			unset($spec->__required);

			$params = [];
			$props = [];
			$constructor = [];
			foreach ($spec as $paramName => $type)
			{
				if (is_array($type))
					$type = 'array';
				else
					$type = reduceNamespace(Schema::decodeType($type));

				$required = in_array($paramName, $requiredParams);
				$params [] = ($required ? '' : '?') . $type . ' $' . $paramName. ($required ? '' : ' = null');
				$props []= "public \$$paramName;";
				$constructor []= "\$this->$paramName = \$$paramName;";
			}

			$object = "<?php namespace TooBasic\\Ethereum\\Schema\\Object;
use TooBasic\\Ethereum\\Schema;

class $name extends Schema\\Object\Base # generated by ClientGenerator based on schema.json
{
	". implode("\n\t", $props) ."

	public function __construct(
		". implode(",\n\t\t", $params) ."
	){
		". implode("\n\t\t", $constructor) ."
	}
}
";
			file_put_contents('Schema/Object/' . $name . '.php', $object);
			include('Schema/Object/' . $name . '.php');
		}

		$object = "<?php namespace TooBasic\\Ethereum;
use TooBasic\Rpc\Client as RpcClient;

class Client extends RpcClient\\Json2 # generated by ClientGenerator based on schema.json
{";
		foreach ($schema->methods as $name => $spec)
		{
			if ('__optional' == $name)
				continue;

			$params = [];
			$encodedParams = [];
			foreach ($spec[0] as $i => $param)
			{
				$paramName = '$'. chr(97 + $i);
				$type = Schema::decodeType($param);
				$params[$paramName] = reduceNamespace($type) .' '. $paramName;

				if (0 === strpos($type, Schema::class))
					$encodedParams []= "isset($paramName)?{$paramName}->encode():null";
				else
					$encodedParams []= $paramName;
			}

			$return = "parent::{$name}(". implode(', ', $encodedParams) .")";
			$returnType = Schema::decodeType( is_array($spec[1]) ? $spec[1][0] : $spec[1] );

			if (is_array($spec[1]))
			{
				$object .= "\n\t/**\n\t * @returns ". reduceNamespace($returnType). "[]\n\t */";
				$returnSub = 0 === strpos($returnType, Schema::class) ? "isset(\$x)?". reduceNamespace($returnType). "::decode(\$x):null" : "\$x";
				$return = "array_map(function (\$x){ return $returnSub; }, $return)";

				$returnType = 'array';
			}
			else
			{
				$returnType = reduceNamespace(Schema::decodeType($spec[1]));

				if (false !== strpos($returnType, 'Schema\\'))
					$return = $returnType .'::decode('.$return.')';
				else # for bool / string
					$return = '('.$returnType.')'. $return;
			}

			$object .= "\n\tpublic function $name(". implode(', ', $params) ."): $returnType\n\t{ return $return; }\n";
		}


		$object .= "}\n";

		file_put_contents('Client.php', $object);
	}
}

chdir(__DIR__);
ClientGenerator::generate();